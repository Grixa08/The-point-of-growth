import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './AllEvents.css';
import EventCard from '../components/EventCard';
import EventsByType from '../components/EventsByType'; // –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø—É

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–≤–µ–Ω—Ç–∞
export type EventItem = {
  id: string;
  title: string;
  type: string;
  company: string;
  date: string;
  isNew?: boolean;
  tags?: string[];
  imageUrl?: string;
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –±–∞–Ω–Ω–µ—Ä–∞
const bannerSlides = [
  {
    id: 1,
    title: '–û–ª–∏–º–ø–∏–∞–¥—ã',
    type: '–û–ª–∏–º–ø–∏–∞–¥–∞'
  },
  {
    id: 2,
    title: '–ö–æ–Ω–∫—É—Ä—Å—ã',
    type: '–ö–æ–Ω–∫—É—Ä—Å'
  },
  {
    id: 3,
    title: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏',
    type: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞'
  },
  {
    id: 4,
    title: '–í–∞–∫–∞–Ω—Å–∏–∏',
    type: '–í–∞–∫–∞–Ω—Å–∏—è'
  },
  {
    id: 5,
    title: "–°–æ–±—ã—Ç–∏—è",
    type: "–°–æ–±—ã—Ç–∏—è"
  }
];

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Ç–æ–º –∑–∞–º–µ–Ω—è—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å –±—ç–∫–∞)
const mockEvents: EventItem[] = [
  {
    id: '1',
    title: '–û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
    type: '–û–ª–∏–º–ø–∏–∞–¥–∞',
    company: '–û–û–û "–õ—É—á—à–∏–π–ò–Ω—Ñ–æ–ì–∏–≥–∞–Ω—Ç"',
    date: '12 —Å–µ–Ω—Ç—è–±—Ä—è',
    isNew: true,
    tags: ['Frontend', '2024'],
  },
  {
    id: '2',
    title: '–û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ —Ñ–∏–∑–∏–∫–µ',
    type: '–û–ª–∏–º–ø–∏–∞–¥–∞',
    company: '–û–û–û "–ù–∞—É–∫–∞"',
    date: '15 —Å–µ–Ω—Ç—è–±—Ä—è',
    isNew: true,
    tags: ['Backend'],
  },
  {
    id: '3',
    title: '–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
    type: '–ö–æ–Ω–∫—É—Ä—Å',
    company: '–û–û–û "–ù–∞—É–∫–∞"',
    date: '15 —Å–µ–Ω—Ç—è–±—Ä—è',
    isNew: true,
    tags: ['Backend'],
  },
  {
    id: '4',
    title: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏',
    type: '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞',
    company: '–û–û–û "–ù–∞—É–∫–∞"',
    date: '15 —Å–µ–Ω—Ç—è–±—Ä—è',
    tags: ['Backend'],
  },
  {
    id: '5',
    title: '–í–∞–∫–∞–Ω—Å–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
    type: '–í–∞–∫–∞–Ω—Å–∏—è',
    company: '–û–û–û "–ù–∞—É–∫–∞"',
    date: '15 —Å–µ–Ω—Ç—è–±—Ä—è',
    tags: ['Backend'],
  },
  {
    id: '6',
    title: '–í–∞–∫–∞–Ω—Å–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
    type: '–°–æ–±—ã—Ç–∏—è',
    company: '–û–û–û "–ù–∞—É–∫–∞"',
    date: '15 —Å–µ–Ω—Ç—è–±—Ä—è',
    tags: ['Backend'],
  },
  {
    id: '7',
    title: '–ö–æ–Ω–∫—É—Ä—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—èz',
    type: '–ö–æ–Ω–∫—É—Ä—Å',
    company: '–û–û–û "–ù–∞—É–∫–∞"',
    date: '15 —Å–µ–Ω—Ç—è–±—Ä—è',
    isNew: true,
    tags: ['Backend'],
  }
];

function AllEvents() {
    const navigate = useNavigate();
    const [currentSlide, setCurrentSlide] = useState(1);
    const [isAutoPlaying, setIsAutoPlaying] = useState(true);
    const [isTransitioning, setIsTransitioning] = useState(true);
    const [selectedType, setSelectedType] = useState<string | null>(null); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–∞–π–¥–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏
    const extendedSlides = [bannerSlides[bannerSlides.length - 1], ...bannerSlides, bannerSlides[0]];

    const allTypes = ['–û–ª–∏–º–ø–∏–∞–¥–∞', '–ö–æ–Ω–∫—É—Ä—Å', '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞', '–í–∞–∫–∞–Ω—Å–∏—è', '–°–æ–±—ã—Ç–∏—è'];

    const eventsByType: Record<string, EventItem[]> = {};
    allTypes.forEach(type => {
      eventsByType[type] = mockEvents.filter(e => e.type === type);
    });

    const nonEmptySections = allTypes.filter(type => eventsByType[type].length > 0);
    const emptySections = allTypes.filter(type => eventsByType[type].length === 0);

    useEffect(() => {
        if (!isAutoPlaying || selectedType) return; // –ù–µ –∞–≤—Ç–æ–ø–ª–µ–∏–º –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø

        const interval = setInterval(() => {
            setCurrentSlide((prev) => {
                const nextSlide = prev + 1;

                if (nextSlide === extendedSlides.length - 1) {
                    setTimeout(() => {
                        setIsTransitioning(false);
                        setCurrentSlide(1);
                        setTimeout(() => setIsTransitioning(true), 50);
                    }, 500);
                    return nextSlide;
                }

                return nextSlide;
            });
        }, 3000);

        return () => clearInterval(interval);
    }, [isAutoPlaying, extendedSlides.length, selectedType]);

    const goToSlide = (index: number) => {
        const extendedIndex = index + 1;
        setCurrentSlide(extendedIndex);
        setIsAutoPlaying(false);
        setIsTransitioning(true);
        setTimeout(() => setIsAutoPlaying(true), 5000);
    };

    const handleShowAll = (type: string) => {
        setSelectedType(type);
        setIsAutoPlaying(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
    };

    const handleBackToAll = () => {
        setSelectedType(null);
        setIsAutoPlaying(true); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å
    };

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç EventsByType
    if (selectedType) {
        return (
            <EventsByType 
                type={selectedType}
                events={eventsByType[selectedType] || []}
                onBack={handleBackToAll}
            />
        );
    }

    return (
        <div className="all-events-container">
            <div className="banner">
                <div
                    className="banner-carousel"
                    style={{
                        transform: `translateX(calc(-${currentSlide * 100}% - ${currentSlide * 20}px))`,
                        transition: isTransitioning ? 'transform 0.5s ease-in-out' : 'none'
                    }}
                >
                    {extendedSlides.map((slide, index) => (
                        <div
                            key={`${slide.id}-${index}`}
                            className="banner-slide"
                        >
                            <div className="banner-content">
                                <h2>{slide.title}</h2>
                                <button 
                                    className="see-all-btn"
                                    onClick={() => handleShowAll(slide.type)}
                                >
                                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
                
                {/* –¢–æ—á–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
                <div className="slider-dots">
                    {bannerSlides.map((_, index) => {
                        const isActive = index === (currentSlide - 1) ||
                                       (currentSlide === 0 && index === bannerSlides.length - 1) ||
                                       (currentSlide === extendedSlides.length - 1 && index === 0);
                        return (
                            <span
                                key={index}
                                className={`dot ${isActive ? 'active' : ''}`}
                                onClick={() => goToSlide(index)}
                            />
                        );
                    })}
                </div>
            </div>

            {/* –°–Ω–∞—á–∞–ª–∞ —Å–µ–∫—Ü–∏–∏ —Å –∏–≤–µ–Ω—Ç–∞–º–∏ */}
            {nonEmptySections.map((type, idx) => (
              <div className={`section${idx === 0 ? ' first-section' : ''}`} key={type}>
                <div className="section-header">
                  <h3>{type}</h3>
                  <button 
                    className="btn-event"
                    onClick={() => handleShowAll(type)}
                  >
                    –í—Å–µ
                  </button>
                </div>
                <div className="events-list">
                  {eventsByType[type].map(event => (
                    <EventCard key={event.id} {...event} />
                  ))}
                </div>
              </div>
            ))}

            {/* –ü–æ—Ç–æ–º —Å–µ–∫—Ü–∏–∏ –±–µ–∑ –∏–≤–µ–Ω—Ç–æ–≤ (–ø—É—Å—Ç—ã–µ) */}
            {emptySections.map(type => (
              <div className={"section empty-section"} key={type}>
                <h3>{type}</h3>
                <div className="events-list empty-list">
                  <div className="empty-events-placeholder">–ü–æ–∫–∞ –Ω–µ—Ç –∏–≤–µ–Ω—Ç–æ–≤</div>
                </div>
              </div>
            ))}

            {/* –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é */}
            <div className="bottom-nav">
                <div className="nav-item" onClick={() => navigate('/allEvents')}>
                    <span role="img" aria-label="events">üìÖ</span>
                    <div>–í—Å–µ –∏–≤–µ–Ω—Ç—ã</div>
                </div>
                <div className="nav-item" onClick={() => navigate('/my')}>
                    <span role="img" aria-label="my-events">üîî</span>
                    <div>–ú–æ–∏ –∏–≤–µ–Ω—Ç—ã</div>
                </div>
                <div className="nav-item" onClick={() => navigate('/account')}>
                    <span role="img" aria-label="account">üë§</span>
                    <div>–ê–∫–∫–∞—É–Ω—Ç</div>
                </div>
            </div>
        </div>
    )
}

export default AllEvents;